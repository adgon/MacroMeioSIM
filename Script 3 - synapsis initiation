###   Load libaries
library(tidyr)
library(dplyr)
library(readxl)
library(readr)
library(lme4)
library (glmmTMB)
library(ggplot2)
library(performance)
library(gridExtra)
library (ggeffects)
library (DHARMa)
library (emmeans)
library (MuMIn)
library(dunn.test)
library(MASS)



###   Set graphical parameters
par(mfrow = c(1,1))
colors<- c("magenta", "dodgerblue")


###   Access raw dataset inputs (from Fiji outputs)
files <- read_csv("~/R cytology/immuno 2.0/files.csv")
SIM <- read.csv("~/R cytology/immuno 2.0/SIM3.csv")
skeletonzyp <- read.csv("~/R cytology/immuno 2.0/earlyzyp1.csv")  


### Wrangling
SIS <- na.omit (skeletonzyp)  
colnames (SIS) [9] <- "Length"
SIS <- SIS %>% filter (Genotype == "EST_4x" |Genotype ==  "NEO_4x" & Length <= 1000)
SIS$Genotype <- factor(SIS$Genotype, levels = c( "NEO_4x","EST_4x")) # refactor to change the reference genotype


###Define plotting function

plot_emmeans <- function(x) {
  # Extract needed values
  labels <- as.data.frame(x)[[1]]  # Extract the genotype names
  emmeans <- as.data.frame(x)[[2]]  # Extract the emmeans mean values
  SEs <- as.data.frame(x)[[3]]  # Extract the SEs
  LCL <- as.data.frame(x)[[5]]  # Extract the lower confidence limit (LCL)
  UCL <- as.data.frame(x)[[6]]  # Extract the upper confidence limit (UCL)
  
  # Plot with Confidence Intervals
  min_ci <- if (min(LCL) > 0)  0 else min(LCL) #set lower y limit which will be 0 if the minimum value is > 0 
  max_ci <- max(UCL) # Set upper y limit
  plot(emmeans, pch = 16, xlab = "", ylab = "",  xlim = c(0.5, 2.5),  ylim = c(min_ci, max_ci), xaxt = "n", cex= 0, cex.axis = 1.15) # make the plot
  axis(side = 1, at = 1:nrow(as.data.frame(x)), labels = labels, cex.axis = 1) #add axis labels
  arrows(1:nrow(as.data.frame(x)), LCL, 1:nrow(as.data.frame(x)), UCL, angle = 90, code = 3, length = 0.0, col = adjustcolor(colors, alpha.f = 0.3), lwd = 6)  # Add confidence interval bars
  points(1:nrow(as.data.frame(x)), emmeans, pch = 16, col = colors, cex = 1.1)  # Add data points with different colors
}


### Analyze Synaptic Initiation Sites


  ## Fit models
  
  SIS1 <- glmmTMB(SIS ~ Length * Genotype, data = SIS, family = gaussian(link=identity) )
  SIS2 <- glmmTMB(SIS ~ Length * Genotype, data = SIS, family = poisson(link=identity) )
  SIS3 <- glm.nb(SIS ~ Length * Genotype, data = SIS, link=identity)
  SIS4 <- glmmTMB(SIS ~ Length * Genotype, data = SIS, family = gaussian() )
  SIS5 <- glmmTMB(SIS ~ Length * Genotype, data = SIS, family = poisson() )
  SIS6 <- glm.nb(SIS ~ Length * Genotype, data = SIS)
  
  compare_performance(SIS1, SIS2, SIS3, SIS4, SIS5, SIS6)
  
  SIS_glm<- SIS6
  
  ##Model diagnostics
  check_singularity(SIS_glm) #check for singularity (if so means the model is to complex)
  simulation1 <-simulateResiduals(fittedModel = SIS_glm, n = 1000, plot= TRUE) # check for assumptions in the residuals: 1. Normality, 2. No over- or under-dispersion, 3. No excess of outliers, 4 Homocestasticity
  testZeroInflation (SIS_glm) #check for zero-inflation
  testDispersion(SIS_glm) #check for under and over-dispersion
  testQuantiles(simulation1) #check quantiles
  plotResiduals(SIS_glm) # Check overal homoscedasticity
  plotResiduals(SIS_glm, form= SIS$Genotype) # Check homoscedasticity across Genotypes
  plotResiduals(SIS_glm, form= SIS$Plant_name) # Check homoscedasticity across plants
  plotResiduals(SIS_glm, form= SIS$length) # Check homoscedasticity across coarsening
  check_collinearity( glmmTMB(SIS ~  Genotype + Length * (1|Plant), data = SIS, family = gaussian() )) #check collinearity of variables of candidate model (interactions excluded)
  summary (SIS_glm) # summary of the model
  
  ##Plot model
  prediction <- predict_response(SIS_glm, terms = c("Length", "Genotype"))
  plot(prediction, facet = FALSE, show_data = TRUE, colors= colors, limit_range = FALSE)
  
  ## Analize intercepts with emmeans
  SIS_intercept <- emmeans(SIS_glm, "Genotype", at = list(Length = 0), type = "response") # extract intercepts
  SIS_intercept # print intercepts
  SIS_test_intecept <- pairs(SIS_intercept, adjust= "holm") # pairwise comparisons
  SIS_test_intecept
  plot_emmeans(SIS_intercept)  
  
  ## Analyze response to length with eammeans 
  SIS_interactions <- emtrends(SIS_glm,  ~ Genotype, var = "Length")
  SIS_interactions
  SIS_test_interactions<- pairs(SIS_interactions, adjust= "holm")
  SIS_test_interactions  
  plot_emmeans(SIS_interactions)  
  
  
  
### Analyze Synaptic Elongation Sites
  
  ## Fit models
  
  SES1 <- glmmTMB(SES ~ Length * Genotype, data = SIS, family = gaussian(link=identity) )
  SES2 <- glmmTMB(SES ~ Length * Genotype, data = SIS, family = poisson(link=identity) )
  SES3 <- glm.nb(SES ~ Length * Genotype, data = SIS, link=identity)
  SES4 <- glmmTMB(SES ~ Length * Genotype, data = SIS, family = gaussian() )
  SES5 <- glmmTMB(SES ~ Length * Genotype, data = SIS, family = poisson() )
  SES6 <- glm.nb(SES ~ Length * Genotype, data = SIS)
  
  compare_performance(SES1, SES2, SES3, SES4, SES5, SES6)
  
  SES_glm<- SES2
  
  #Model diagnostics
  #Model diagnostics
  check_singularity(SES_glm) #check for singularity (if so means the model is to complex)
  simulation1 <-simulateResiduals(fittedModel = SES_glm, n = 1000, plot= TRUE) # check for assumptions in the residuals: 1. Normality, 2. No over- or under-dispersion, 3. No excess of outliers, 4 Homocestasticity
  testZeroInflation (SES_glm) #check for zero-inflation
  testDispersion(SES_glm) #check for under and over-dispersion
  testQuantiles(simulation1) #check quantiles
  plotResiduals(SES_glm) # Check overal homoscedasticity
  plotResiduals(SES_glm, form= SIS$Genotype) # Check homoscedasticity across Genotypes
  plotResiduals(SES_glm, form= SIS$Plant_name) # Check homoscedasticity across plants
  plotResiduals(SES_glm, form= SIS$length) # Check homoscedasticity across coarsening
  check_collinearity( glmmTMB(SES ~  Genotype + Length * (1|Plant), data = SIS, family = gaussian() )) #check collinearity of variables of candidate model (interactions excluded)
  summary (SES_glm) # summary of the model
  
  ##Plot model
  prediction <- predict_response(SES_glm, terms = c("Length", "Genotype"))
  plot(prediction, facet = FALSE, show_data = TRUE, colors= colors, limit_range = FALSE)
  
  ## Analize intercepts with emmeans
  SES_intercept <- emmeans(SES_glm, "Genotype", at = list(Length = 0), type = "response") # extract intercepts
  SES_intercept # print intercepts
  SES_test_intecept <- pairs(SES_intercept, adjust= "holm") # pairwise comparisons
  SES_test_intecept
  plot_emmeans(SES_intercept)  
  
  ## Analyze response to length with eammeans 
  SES_interactions <- emtrends(SES_glm,  ~ Genotype, var = "Length")
  SES_interactions
  SES_test_interactions<- pairs(SES_interactions, adjust= "holm")
  SES_test_interactions  
  plot_emmeans(SES_interactions)  

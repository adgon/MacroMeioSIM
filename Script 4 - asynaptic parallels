###   Load libaries
library(tidyr)
library(dplyr)
library(readxl)
library(readr)
library(lme4)
library (glmmTMB)
library(ggplot2)
library(performance)
library(gridExtra)
library (ggeffects)
library (DHARMa)
library (emmeans)
library (MuMIn)
library(dunn.test)



###   Set graphical parameters
par(mfrow = c(1,1))



###   Access raw dataset inputs (from Fiji outputs)
files <- read_csv("~/R cytology/immuno 2.0/files.csv")

SIM <- read.csv("~/R cytology/immuno 2.0/SIM4.csv")
parallel <- read.csv("~/R cytology/immuno 2.0/parallel.csv")
excluded_images <- c("cSN-1_032", "cSN-2_027", "cSN-2_018", "cSN-2_005", "cSN-2_009","cD4-2-1_010", "T2-10_000", "T2-10_001", "T2-10_005", "T2-4-4_001", "T1-5_slide1_007", "T2-4-4_008", "SNO-1_12", "SNO-1_17", "T2-4-4_002", "SNO-4_33", "D1-5_38", "SNO-1_26", "N2-9_07", "SNO-1_06", "SNO-1_26", "F3-3_Slide2_014", "F3-3_Slide3_012", "F1-2_008", "F1-2_000") #make list of excluded images
parallel <- filter(parallel, !(File %in% excluded_images)) # filter out the excluded images


## Define plot function for eameans results
plot_emmeans <- function(x) {
  # Extract needed values
  labels <- as.data.frame(x)[[1]]  # Extract the genotype names
  emmeans <- as.data.frame(x)[[2]]  # Extract the emmeans mean values
  SEs <- as.data.frame(x)[[3]]  # Extract the SEs
  LCL <- as.data.frame(x)[[5]]  # Extract the lower confidence limit (LCL)
  UCL <- as.data.frame(x)[[6]]  # Extract the upper confidence limit (UCL)
  
  # Plot with Confidence Intervals
  min_ci <- if (min(LCL) > 0) 0 else min(LCL) #set lower y limit which will be 0 if the minimum value is >0 
  max_ci <- max(UCL) # Set upper y limit
  plot(emmeans, pch = 16, xlab = "", ylab = "", ylim = c(min_ci, max_ci), xaxt = "n", cex= 0, cex.axis = 1.15) # make the plot
  axis(side = 1, at = 1:nrow(as.data.frame(x)), labels = labels, cex.axis = 1) #add axis labels
  arrows(1:nrow(as.data.frame(x)), LCL, 1:nrow(as.data.frame(x)), UCL, angle = 90, code = 3, length = 0.0, col = adjustcolor(colors, alpha.f = 0.3), lwd = 6)  # Add confidence interval bars
  points(1:nrow(as.data.frame(x)), emmeans, pch = 16, col = colors, cex = 1.1)  # Add data points with different colors
}
colors <- c("limegreen", "magenta", "orange", "dodgerblue")



  ##   To look-up all the values in the fiji outputs and  assign them to their respective images
  parallel <- parallel %>% mutate(ASY1 = NA)
  for (i in  1: nrow(parallel)) {
    parallel$ASY1 [i] <- SIM$ASY1 [which ((parallel$File [i] ==  SIM$File))]
  }
 
  
  
  
  ## Set the window of HEI10 accumulation levels
  lower <- 0
  upper <- 150
  parallel <- filter (parallel, parallel$ASY1 >= lower & parallel$ASY1 <= upper)
  
  ###filter by genotype
  DIP <- parallel %>% filter (Genotype == "DIP_2x") 
  NEO <- parallel %>% filter (Genotype == "NEO_4x")
  EST <- parallel %>% filter (Genotype == "EST_4x")
  HYB <- parallel %>% filter (Genotype == "HYB_4x")
  
  DIP$ASY1 <- 2*DIP$ASY1 #to double the values of DIP so it can be compared with tetraploids
  DIP$parallels <- 2*DIP$parallels #to double the values of DIP so it can be compared with tetraploids
  
  parallel <- bind_rows(DIP, NEO, HYB, EST) ## Update data
  parallel$Genotype <- factor(parallel$Genotype, levels = c("DIP_2x", "NEO_4x", "HYB_4x", "EST_4x"))  # Re-factor
  
 
  parallel$parpermicron <- parallel$parallels / parallel$ASY1
  
  
  model1 <- glmmTMB(parallels ~ ASY1 * Genotype * (1|Genotype: Plant), data = parallel, nbinom2() )
  model2 <- glmmTMB(parallels ~ ASY1 * Genotype * (1|Genotype: Plant), data = parallel, nbinom2(), ziformula = ~1 )
  model3 <- glmmTMB(parallels ~ ASY1 * Genotype * (1|Genotype: Plant), data = parallel, poisson() )
  model4 <- glmmTMB(parallels ~ ASY1 * Genotype * (1|Genotype: Plant), data = parallel, poisson(), ziformula = ~1 )

  
  compare_performance(model1, model2, model3, model4)
  
  paraglmm<-model1
  
  #Model diagnostics
  check_singularity(paraglmm) #check for singularity (if so means the model is to complex)
  simulation1 <-simulateResiduals(fittedModel = paraglmm, n = 1000, plot= TRUE) # check for assumptions in the residuals: 1. Normality, 2. No over- or under-dispersion, 3. No excess of outliers, 4 Homocestasticity
  testZeroInflation (paraglmm) #check for zero-inflation
  testDispersion(paraglmm) #check for under and over-dispersion
  testQuantiles(simulation1) #check quantiles
  plotResiduals(paraglmm) # Check overal homoscedasticity
  plotResiduals(paraglmm, form= parallel$Genotype) # Check homoscedasticity across Genotypes
  plotResiduals(paraglmm, form= parallel$Plant_name) # Check homoscedasticity across plants
  plotResiduals(paraglmm, form= parallel$length) # Check homoscedasticity across coarsening
  check_collinearity(  glmmTMB(parallels ~ ASY1 + Genotype , data = parallel, poisson(), ziformula = ~1 )) #check collinearity of variables of candidate model (interactions excluded)
  
  summary (paraglmm) # summary of the model
  
  
  
  
  ## Analize intercepts with emmeans
  query_intercept <- 100 #set the X value at which you want to predict the intercept
  para_intercept <- emmeans(paraglmm, "Genotype", at = list(ASY1 = query_intercept), type = "response") # extract intercepts
  para_intercept # print intercepts
  para_test_intecept <- pairs(para_intercept, adjust= "holm") # pairwise comparisons
  para_test_intecept
  plot_emmeans(para_intercept)
  
  
  ##Final model  
  prediction <- predict_response(paraglmm, terms = c("ASY1", "Genotype"))
  plot(prediction, facet = TRUE, show_data = TRUE, colors= colors, limit_range = FALSE)+ # plot the trend line plus data points
    scale_x_continuous(limits = c(0, 150), breaks = seq(0, 150, by = 50))+
    scale_y_continuous(limits = c(0, 35), breaks = seq(0, 25, by = 5))
 
